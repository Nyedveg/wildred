[gd_scene load_steps=8 format=3 uid="uid://dwn6eaj6srtn0"]

[sub_resource type="Curve" id="Curve_i84a8"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.247159, 0.353631), 0.0, 0.0, 0, 0, Vector2(1, 0.106704), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_7boms"]
curve = SubResource("Curve_i84a8")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_wkbxi"]
emission_shape = 1
emission_sphere_radius = 0.3
angle_min = 1.07288e-05
angle_max = 360.0
direction = Vector3(0, 0, 1)
spread = 0.0
initial_velocity_min = 0.5
initial_velocity_max = 1.0
gravity = Vector3(0, 0.5, 0)
linear_accel_min = -5.03
linear_accel_max = 3.06
radial_accel_min = -2.23517e-06
radial_accel_max = -2.23517e-06
scale_curve = SubResource("CurveTexture_7boms")
anim_speed_min = 1.0
anim_speed_max = 1.0
anim_offset_max = 1.0

[sub_resource type="Shader" id="Shader_cw512"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx, unshaded;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform int particles_anim_h_frames : hint_range(1, 128);
uniform int particles_anim_v_frames : hint_range(1, 128);
uniform bool particles_anim_loop;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;

	// Billboard Mode: Particles
	mat4 mat_world = mat4(
			normalize(INV_VIEW_MATRIX[0]),
			normalize(INV_VIEW_MATRIX[1]),
			normalize(INV_VIEW_MATRIX[2]),
			MODEL_MATRIX[3]);
	mat_world = mat_world * mat4(
			vec4(cos(INSTANCE_CUSTOM.x), -sin(INSTANCE_CUSTOM.x), 0.0, 0.0),
			vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),
			vec4(0.0, 0.0, 1.0, 0.0),
			vec4(0.0, 0.0, 0.0, 1.0));
	MODELVIEW_MATRIX = VIEW_MATRIX * mat_world;

	// Billboard Keep Scale: Enabled
	MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(
			vec4(length(MODEL_MATRIX[0].xyz), 0.0, 0.0, 0.0),
			vec4(0.0, length(MODEL_MATRIX[1].xyz), 0.0, 0.0),
			vec4(0.0, 0.0, length(MODEL_MATRIX[2].xyz), 0.0),
			vec4(0.0, 0.0, 0.0, 1.0));

	MODELVIEW_NORMAL_MATRIX = mat3(MODELVIEW_MATRIX);

	float h_frames = float(particles_anim_h_frames);
	float v_frames = float(particles_anim_v_frames);
	float particle_total_frames = float(particles_anim_h_frames * particles_anim_v_frames);
	float particle_frame = floor(INSTANCE_CUSTOM.z * float(particle_total_frames));
	if (!particles_anim_loop) {
		particle_frame = clamp(particle_frame, 0.0, particle_total_frames - 1.0);
	} else {
		particle_frame = mod(particle_frame, particle_total_frames);
	}
	UV /= vec2(h_frames, v_frames);
	UV += vec2(mod(particle_frame, h_frames) / h_frames, floor((particle_frame + 0.5) / h_frames) / v_frames);
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);

	// Vertex Color Use as Albedo: Enabled
	albedo_tex *= COLOR;

	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	ALPHA *= albedo.a * albedo_tex.a;
}
"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_k6sfd"]
load_path = "res://.godot/imported/Dirt_spritesheet.png-a720d3685ceac60350dcf11f43c49cb6.s3tc.ctex"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_getj0"]
render_priority = 0
shader = SubResource("Shader_cw512")
shader_parameter/albedo = Color(0.330983, 0.226171, 0.144643, 1)
shader_parameter/texture_albedo = SubResource("CompressedTexture2D_k6sfd")
shader_parameter/albedo_texture_size = Vector2i(865, 181)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/particles_anim_h_frames = 5
shader_parameter/particles_anim_v_frames = 2
shader_parameter/particles_anim_loop = true
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="QuadMesh" id="QuadMesh_do7y8"]
material = SubResource("ShaderMaterial_getj0")

[node name="dust_particle" type="Node3D"]

[node name="GPUParticles3D" type="GPUParticles3D" parent="."]
emitting = false
amount = 20
local_coords = true
draw_order = 3
process_material = SubResource("ParticleProcessMaterial_wkbxi")
draw_pass_1 = SubResource("QuadMesh_do7y8")
